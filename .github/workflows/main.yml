name: Main

on:
  push:
    branches: ['main']
  workflow_dispatch:

env:
  NODE_ENV: 'test'

jobs:
  eslint:
    name: ESlint
    runs-on: 'ubuntu-latest'
    steps:
      - name: '[Setup] Checkout'
        uses: actions/checkout@v4
      - name: '[Setup] Node.js'
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          check-latest: false
          cache: npm
          cache-dependency-path: package-lock.json
      - name: '[Setup] Install dependencies'
        run: npm install

      - name: '[Run] ESlint'
        run: npm run check:lint

  prettier:
    name: Prettier
    runs-on: ubuntu-latest
    steps:
      - name: '[Setup] Checkout'
        uses: actions/checkout@v4
      - name: '[Setup] Node.js'
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          check-latest: false
          cache: npm
          cache-dependency-path: package-lock.json
      - name: '[Setup] Install dependencies'
        run: npm install
      - name: '[Run] Prettier'
        run: npm run check:prettier

  typescript:
    name: Typescript
    runs-on: ubuntu-latest
    steps:
      - name: '[Setup] Checkout'
        uses: actions/checkout@v4
      - name: '[Setup] Node.js'
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          check-latest: false
          cache: npm
          cache-dependency-path: package-lock.json
      - name: '[Setup] Install dependencies'
        run: npm install
      - name: '[Run] Typescript'
        run: npm run check:typescript

  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: '[Setup] Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: '[Setup] Node.js'
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          check-latest: false
          cache: npm
          cache-dependency-path: package-lock.json
      - name: '[Setup] Install dependencies'
        run: npm install
      - name: '[Run] Tests'
        run: npm run test:run

  coverage:
    name: Coverage
    needs:
      - eslint
      - prettier
      - typescript
      - tests
    runs-on: ubuntu-latest
    steps:
      - name: '[Setup] Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: '[Setup] Node.js'
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          check-latest: false
          cache: npm
          cache-dependency-path: package-lock.json
      - name: '[Setup] Install dependencies'
        run: npm install
      - name: '[Run] Coverage'
        run: npm run test:summary
      - name: '[Prepare] Get percentage'
        id: get-values
        shell: bash
        run: |
          COV=$(node -p 't=require(`./coverage/coverage-summary.json`).total,Math.min(...`lines|statements|functions|branches`.split(`|`).map(k=>t[k].pct))')
          echo "coverage=$COV" >> $GITHUB_OUTPUT
      - name: '[GIT] Switch to gh-pages'
        uses: actions/checkout@v4
        with:
          ref: gh-pages
      - name: '[GIT] Create branch'
        run: git checkout -b bot-badge-update
      - name: '[Setup] Install badgen'
        run: npm i -g badgen-cli
      - name: '[Setup] Create badge directory'
        run: mkdir -p badges
      - name: '[Run] Create Badges'
        shell: bash
        run: |
          export COV=${{ steps.get-values.outputs.coverage }}
          COLOR=$(node -p '+process.env.COV >= 95 ? `green` : `orange`')
          badgen -j coverage -s $COV% -c $COLOR > badges/coverage.svg
      - name: '[GIT] User'
        run: |
          git config --global user.email "${{ vars.BOT_EMAIL }}"
          git config --global user.name "${{ vars.BOT_USERNAME }}"
      - name: '[GIT] Add badges'
        run: git add badges
      - name: '[GIT] Commit'
        run:  git commit -a -m "[Bot] Update coverage badge"
      - name: '[GIT] Push'
        env:
          TOKEN: ${{ secrets.BOT_KEY }}
        run: git push https://github.com/${{ github.repository }}.git HEAD:bot-badge-update

#  merge:
#    name: Merge
#    needs:
#      - coverage
#    runs-on: ubuntu-latest
#    steps:
#      - name: '[GIT] Switch to gh-pages'
#        uses: actions/checkout@v4
#        with:
#          ref: bot-badge-update
#          fetch-depth: 1
#      - name: '[GIT] Create PR'
#        id: create_pr
#        uses: peter-evans/create-pull-request@v3
#        with:
#          token: ${{ secrets.BOT_KEY }}
#          branch: bot-badge-update
#          base: gh-pages
#          title: "[Bot] Badge update"
#          body: "This PR is automatically created by BOT and will be merge automatically as well."
#      - name: '[GIT] Merge PR'
#        if: success() && steps.create_pr.outputs.pull-request-created
#        env:
#          GH_TOKEN: ${{ secrets.BOT_KEY }}
#        run: gh pr merge ${{ steps.create_pr.outputs.pull-request-number }} --squash --delete-branch --admin
#      - name: '[GIT] Clean branch'
#        env:
#          GH_TOKEN: ${{ secrets.BOT_KEY }}
#        run: git push origin -d bot-badge-update || echo "Branch bot-badge-update does not exist, skipping deletion"
